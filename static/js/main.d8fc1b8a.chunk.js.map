{"version":3,"sources":["02_comps/Header.js","02_comps/NewTodoForm.js","02_comps/Todo.js","02_comps/SwitchBtn.js","02_comps/Footer.js","02_comps/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","NewTodoForm","props","state","task","handleChange","bind","handleSubmit","event","preventDefault","this","console","log","newTask","id","uuidv4","completed","createTask","setState","target","name","value","onSubmit","htmlFor","type","placeholder","autoFocus","maxLength","onChange","Todo","isEditing","handleDelete","handleUpdate","toggleForm","handleToggle","updateTask","document","getElementById","focus","deleteTask","toggleTask","icon","taskClass","iconClass","onClick","SwitchBtn","disabled","handleSwitch","disable","e","querySelector","contains","getToggle","classList","remove","add","Footer","getToggleAllComplete","toggleAllComplete","allCompleted","totalTodos","TodoList","todos","create","delete","update","toggleCompletion","getCompletedTodos","toggleAllCompletion","filter","box","updatedTask","updatedTodos","map","todo","updatedAllTodos","checked","totalCompletedArr","forEach","push","length","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d8fc1b8a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Header extends Component { \n  render() {\n    return (\n      <div className=\"Header-container\">\n        <h1 className=\"Header-logo\">Tamago</h1>\n        <h2 className=\"Header-title\">Task Manager</h2>\n      </div>\n    )\n  }\n}\n\nexport default Header; ","import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass NewTodoForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {task: \"\"};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event){\n    event.preventDefault();\n    if (this.state.task === \"\") {\n      console.log(\"task is empty!\")\n    } else {\n      let newTask = {...this.state, id: uuidv4(), completed: false}\n      this.props.createTask(newTask);\n      this.setState({task: \"\"});\n    }\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  render() {\n    return (\n      <form className=\"task-form\" onSubmit={this.handleSubmit}>\n        <label htmlFor=\"task\"></label>\n        <input \n          type=\"text\" \n          placeholder=\"new task\"\n          autoFocus=\"autofocus\" \n          id=\"task\"\n          name=\"task\"\n          maxLength=\"35\"\n          value={this.state.task}\n          onChange={this.handleChange}\n        />\n        <button className=\"btn task-form-btn\"><span className=\"material-icons add-icon\">add</span></button>\n      </form>\n    )\n  }\n}\n\nexport default NewTodoForm;","import React, { Component } from 'react';\n// import './Todo.css';\n\nclass Todo extends Component { \n  constructor(props) {\n    super(props);\n    this.state = {\n      isEditing: false, \n      task: this.props.task\n    }\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.toggleForm = this.toggleForm.bind(this);\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  handleUpdate(event) {\n    event.preventDefault();\n    this.props.updateTask(this.props.id, this.state.task);\n    this.setState({isEditing: false});\n    document.getElementById(\"task\").focus();\n  }\n\n  toggleForm() {\n    this.setState({ isEditing: !this.state.isEditing});\n  }\n\n  handleDelete() {\n    this.props.deleteTask(this.props.id);\n  }\n\n  handleToggle() {\n    this.props.toggleTask(this.props.id);\n  }\n\n  render() {\n    let result;\n\n    const icon = this.props.completed ? \"check_circle\" : \"panorama_fish_eye\";\n    const taskClass = this.props.completed ? \"task-bg-comp task-bg\" : \"task-bg\";\n    const iconClass = this.props.completed ? \"material-icons task-icon-comp task-icon\" : \"material-icons task-icon\";\n    \n    if(this.state.isEditing) {\n      result = (\n        <div className=\"Todo-item-edit\">\n          <form className=\"Todo-item-edit-form\" onSubmit={this.handleUpdate}>\n            <input \n              className=\"Todo-item-edit-form--input\"\n              type=\"text\"\n              value={this.state.task}\n              name=\"task\"\n              id=\"edit-task\"\n              autoFocus=\"autofocus\" \n              maxLength=\"35\"\n              onChange={this.handleChange}\n            />\n            <button className=\"btn edit-btn\"><span className=\"material-icons btn-icon\">done</span></button>\n          </form>\n          \n        </div>\n      )\n    } else {\n      result = (\n        <ul className=\"Todo-item\">\n          <div className=\"Todo-task-container\">\n            <div className={taskClass} onClick={this.handleToggle}>\n              <span className={iconClass}>{icon}</span>\n              <li className={this.props.completed ? \"Todo-task-completed\" : \"\"} > \n                {this.props.task}\n              </li>\n            </div>\n          </div>\n          <button className=\"btn Todo-edit-btn\" onClick={this.toggleForm}>\n            <span className=\"material-icons btn-icon\">create</span>\n          </button>\n          <button className=\"btn Todo-del-btn\" onClick={this.handleDelete}>\n            <span className=\"material-icons btn-icon\">clear</span>\n          </button>\n        </ul>\n      )\n    }\n    return result\n  }\n}\n\nexport default Todo; ","import React, { Component } from 'react';\n\nclass SwitchBtn extends Component { \n  constructor(props) {\n    super(props);\n    this.state = {\n      disabled: true\n    }\n    this.handleSwitch = this.handleSwitch.bind(this);\n    this.disable = this.disable.bind(this);\n  }\n\n  handleSwitch(e) {\n    if (document.querySelector(\".TodoList\").contains(document.querySelector(\".Todo-item\"))) {\n      this.props.getToggle();\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  // componentDidMount(){ \n  //   this.disable();\n  // }\n\n  disable() {\n    if (document.querySelector(\".TodoList\").contains(document.querySelector(\".Todo-item\"))) {\n      document.querySelector(\".switch-text\").classList.remove(\"disabled\");\n    } else {\n      document.querySelector(\".switch-text\").classList.add(\"disabled\");\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"switch-btn-container\" >\n        <p className=\"switch-text\">check all</p>\n        <label className=\"switch\">\n          <input \n            type=\"checkbox\" \n            id=\"switch\" \n            onClick={this.handleSwitch} \n          />\n          <span className=\"slider round\"></span>\n        </label>\n       \n      </div>\n    )\n  }\n}\n\nexport default SwitchBtn; ","import React, { Component } from 'react';\n\nimport SwitchBtn from './SwitchBtn';\n\nclass Footer extends Component { \n  constructor(props) {\n    super(props);\n    this.getToggleAllComplete = this.getToggleAllComplete.bind(this);\n  }\n\n  getToggleAllComplete() {\n    this.props.toggleAllComplete();\n  }\n\n  render() {\n\n    return (\n      <div className=\"Footer-container\">\n        <SwitchBtn\n        getToggle={this.getToggleAllComplete}\n        />\n         \n        <h3 className=\"Footer-title\">Completed {this.props.allCompleted()}/{this.props.totalTodos} </h3>\n      </div>\n      \n    )\n  }\n}\n\n\nexport default Footer; ","import React, { Component } from 'react';\n\nimport NewTodoForm from './NewTodoForm';\nimport Todo from './Todo';\nimport Footer from './Footer';\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {todos: [] }\n    this.create = this.create.bind(this);\n    this.delete = this.delete.bind(this);\n    this.update = this.update.bind(this);\n    this.toggleCompletion = this.toggleCompletion.bind(this);\n    this.getCompletedTodos = this.getCompletedTodos.bind(this);\n    this.toggleAllCompletion = this.toggleAllCompletion.bind(this);\n    // this.handleCompleted = this.handleCompleted.bind(this);\n  }\n\n  create(newTask) {\n    this.setState({\n      todos: [...this.state.todos, newTask]\n    });\n  }\n\n  delete(id) {\n    this.setState({\n      todos: this.state.todos.filter(box => box.id !== id)\n    });\n  }\n\n  update(id, updatedTask) {\n    const updatedTodos = this.state.todos.map( todo => {\n      if(todo.id === id) {\n        return {...todo, task: updatedTask}\n      } \n      return todo;\n    })\n    this.setState({todos: updatedTodos});\n  }\n\n  toggleCompletion(id) {\n    const updatedTodos = this.state.todos.map( todo => {\n      if(todo.id === id) {\n        return {...todo, completed: !todo.completed}\n      } \n      return todo;\n    })\n    this.setState({todos: updatedTodos});\n  }\n\n  toggleAllCompletion() {\n    // const updatedAllTodos = this.state.todos.map( todo => {\n    //   if (document.getElementById('switch-btn').checked) {\n    //     alert(\"checked\");\n    //   } else {\n    //     alert(\"You didn't check it! Let me check it for you.\");\n    //   }\n      // return {...todo, completed: true}\n\n      // if(todo.completed === true ) {\n      //   return {...todo, completed: false}\n      // } else {\n      //   return {...todo, completed: false}\n      // }\n    // })\n\n  const updatedAllTodos = this.state.todos.map( todo => {\n    if (document.getElementById('switch').checked === true) {\n      // alert(\"all completed\");\n      return {...todo, completed: true}\n    } else {\n      // alert(\"Not completed\");\n      return {...todo, completed: false}\n    }\n  })\n    // alert(\"hallo\");\n  this.setState({todos: updatedAllTodos})\n  }\n\n  // handleCompleted() {\n  //   this.toggleAllCompletion();\n  //   // alert(\"works\");\n  // }\n\n  getCompletedTodos() {\n    let totalCompletedArr = [];\n    this.state.todos.forEach(todo => {\n      if(todo.completed === true) {\n        totalCompletedArr.push(\"banana\");\n      } \n    })\n    return totalCompletedArr.length;\n  }\n\n  render() {\n    const todos = this.state.todos.map(todo => {\n      return <Todo \n      task={todo.task} \n      key={todo.id}\n      id={todo.id}\n      completed={todo.completed}\n      deleteTask={this.delete}\n      updateTask={this.update}\n      toggleTask={this.toggleCompletion}\n      />;\n    })\n\n    const totalTodos = todos.length;\n\n    return(\n      <div className=\"TodoList\">\n        <NewTodoForm createTask={this.create}/>\n        {todos}\n\n        {/* <button onClick={this.handleCompleted}>All completed</button> */}\n        {/* <SwitchBtn \n        toggleAllComplete={this.toggleAllCompletion}\n        /> */}\n        <Footer \n        allCompleted={this.getCompletedTodos}\n        totalTodos={totalTodos}\n        toggleAllComplete={this.toggleAllCompletion}\n        />\n        \n      </div>\n    )\n  }\n}\n\nexport default TodoList; ","import React from 'react';\nimport './main.scss';\n\nimport Header from './02_comps/Header';\nimport TodoList from './02_comps/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"App main-grid\">\n      <Header />\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}