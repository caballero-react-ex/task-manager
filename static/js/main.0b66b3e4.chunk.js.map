{"version":3,"sources":["02_comps/Header.js","02_comps/NewTodoForm.js","02_comps/Todo.js","02_comps/Footer.js","02_comps/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","NewTodoForm","props","state","task","handleChange","bind","handleSubmit","event","preventDefault","this","console","log","newTask","id","uuidv4","completed","createTask","setState","document","getElementById","focus","target","name","value","onSubmit","htmlFor","type","placeholder","autoFocus","onChange","Todo","isEditing","handleDelete","handleUpdate","toggleForm","handleToggle","updateTask","deleteTask","toggleTask","icon","taskClass","iconClass","onClick","Footer","allCompleted","totalTodos","TodoList","todos","create","delete","update","toggleCompletion","getCompletedTodos","filter","box","updatedTask","updatedTodos","map","todo","totalCompletedArr","forEach","push","length","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0b66b3e4.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Header extends Component { \n  render() {\n    return (\n      <div className=\"Header-container\">\n        <h1 className=\"Header-logo\">Tamago</h1>\n        <h2 className=\"Header-title\">Task Manager</h2>\n      </div>\n      \n    )\n  }\n}\n\n\nexport default Header; ","import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass NewTodoForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {task: \"\"};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event){\n    event.preventDefault();\n\n    \n    if (this.state.task === \"\") {\n      console.log(\"task is empty!\")\n      // this.setState({task: \"Please write a task\"});\n      // alert(\"please write a task\");\n      \n    } else {\n      let newTask = {...this.state, id: uuidv4(), completed: false}\n      this.props.createTask(newTask);\n      this.setState({task: \"\"});\n    }\n\n    document.getElementById(\"task\").focus();\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  render() {\n    return (\n      <form className=\"task-form\" onSubmit={this.handleSubmit}>\n        <label htmlFor=\"task\"></label>\n        <input \n          type=\"text\" \n          placeholder=\"new task\"\n          autoFocus=\"autofocus\" \n          id=\"task\"\n          name=\"task\"\n          value={this.state.task}\n          onChange={this.handleChange}\n        />\n        <button className=\"btn task-form-btn\"><span className=\"material-icons\">add</span></button>\n      </form>\n    )\n  }\n}\n\nexport default NewTodoForm;","import React, { Component } from 'react';\n// import './Todo.css';\n\nclass Todo extends Component { \n  constructor(props) {\n    super(props);\n    this.state = {\n      isEditing: false, \n      task: this.props.task\n    }\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.toggleForm = this.toggleForm.bind(this);\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  handleUpdate(event) {\n    event.preventDefault();\n    this.props.updateTask(this.props.id, this.state.task);\n    this.setState({isEditing: false});\n    document.getElementById(\"task\").focus();\n  }\n\n  toggleForm() {\n    this.setState({ isEditing: !this.state.isEditing});\n  }\n\n  handleDelete() {\n    this.props.deleteTask(this.props.id);\n  }\n\n  handleToggle() {\n    this.props.toggleTask(this.props.id);\n  }\n\n  render() {\n    let result;\n\n    const icon = this.props.completed ? \"check_circle\" : \"panorama_fish_eye\";\n    const taskClass = this.props.completed ? \"task-bg-comp task-bg\" : \"task-bg\";\n    const iconClass = this.props.completed ? \"material-icons task-icon-comp task-icon\" : \"material-icons task-icon\";\n    \n    if(this.state.isEditing) {\n      result = (\n        <div className=\"Todo-item-edit\">\n          <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\n            <input \n              className=\"Todo-edit-form--input\"\n              type=\"text\"\n              value={this.state.task}\n              name=\"task\"\n              id=\"edit-task\"\n              autoFocus=\"autofocus\" \n              onChange={this.handleChange}\n            />\n            <button className=\"btn edit-btn\"><span className=\"material-icons\">done</span></button>\n          </form>\n          \n        </div>\n      )\n    } else {\n      result = (\n        <ul className=\"Todo-item\">\n          <div className=\"Todo-task-container\">\n            <div className={taskClass} onClick={this.handleToggle}>\n              <span className={iconClass}>{icon}</span>\n              <li className={this.props.completed ? \"Todo-task-completed\" : \"\"} > \n                {this.props.task}\n              </li>\n            </div>\n            <button className=\"btn Todo-edit-btn\" onClick={this.toggleForm}><span className=\"material-icons\">create</span></button>\n            <button className=\"btn Todo-del-btn\" onClick={this.handleDelete}><span className=\"material-icons\">clear</span></button>\n          </div>\n        </ul>\n      )\n    }\n    return result\n  }\n}\n\nexport default Todo; ","import React, { Component } from 'react';\n\nclass Footer extends Component { \n  render() {\n\n    // const test = this.props.completed ? console.log(\"completed\") : console.log(\"not completed\");\n    // const test2 = console.log(this.props.completed);\n    return (\n      <div className=\"Footer-container\">\n        <h3 className=\"Footer-title\">Completed {this.props.allCompleted}/{this.props.totalTodos} </h3>\n      </div>\n      \n    )\n  }\n}\n\n\nexport default Footer; ","import React, { Component } from 'react';\n\nimport NewTodoForm from './NewTodoForm';\nimport Todo from './Todo';\nimport Footer from './Footer';\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {todos: [] }\n    this.create = this.create.bind(this);\n    this.delete = this.delete.bind(this);\n    this.update = this.update.bind(this);\n    this.toggleCompletion = this.toggleCompletion.bind(this);\n    this.getCompletedTodos = this.getCompletedTodos.bind(this);\n  }\n\n  create(newTask) {\n    this.setState({\n      todos: [...this.state.todos, newTask]\n    });\n  }\n\n  delete(id) {\n    this.setState({\n      todos: this.state.todos.filter(box => box.id !== id)\n    });\n  }\n\n  update(id, updatedTask) {\n    const updatedTodos = this.state.todos.map( todo => {\n      if(todo.id === id) {\n        return {...todo, task: updatedTask}\n      } \n      return todo;\n    })\n    this.setState({todos: updatedTodos});\n  }\n\n  toggleCompletion(id) {\n    const updatedTodos = this.state.todos.map( todo => {\n      if(todo.id === id) {\n        return {...todo, completed: !todo.completed}\n      } \n      return todo;\n    })\n    this.setState({todos: updatedTodos});\n  }\n\n  // toggleAllCompletion() {\n  //   const updatedAllTodos = todos\n  // }\n\n  getCompletedTodos() {\n    let totalCompletedArr = [];\n    this.state.todos.forEach(todo => {\n      if(todo.completed === true) {\n        totalCompletedArr.push(\"banana\");\n      } \n    })\n    return totalCompletedArr.length;\n  }\n\n  render() {\n    const todos = this.state.todos.map(todo => {\n      return <Todo \n      task={todo.task} \n      key={todo.id}\n      id={todo.id}\n      completed={todo.completed}\n      deleteTask={this.delete}\n      updateTask={this.update}\n      toggleTask={this.toggleCompletion}\n      />;\n    })\n\n    const totalTodos = todos.length;\n\n    \n    \n    \n    \n    // const updatedTodos = this.state.todos.map( todo => {\n    //   if(todo.id === id) {\n    //     return {...todo, completed: !todo.completed}\n    //   } \n    //   return todo;\n    // })\n\n    return(\n      <div className=\"TodoList\">\n        <NewTodoForm createTask={this.create}/>\n        {todos}\n        <Footer \n        allCompleted={this.getCompletedTodos()}\n        totalTodos={totalTodos}\n        />\n      </div>\n    )\n  }\n}\n\n// task={todo.task} \n//       key={todo.id}\n//       id={todo.id}\n//       completed={todo.completed}\n//       deleteTask={this.delete}\n//       updateTask={this.update}\n\nexport default TodoList; ","import React from 'react';\nimport './main.scss';\n\nimport Header from './02_comps/Header';\nimport TodoList from './02_comps/TodoList';\n// import Footer from './02_comps/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App main-grid\">\n      <Header />\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}