{"version":3,"sources":["Todo.js","NewTodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","state","isEditing","task","handleDelete","bind","handleChange","handleUpdate","toggleForm","handleToggle","event","this","setState","target","name","value","preventDefault","updateTask","id","deleteTask","toggleTask","onSubmit","type","onChange","onClick","className","completed","Component","NewTodoForm","handleSubmit","newTask","uuidv4","createTask","htmlFor","placeholder","TodoList","todos","create","delete","update","toggleCompletion","filter","box","updatedTask","updatedTodos","map","todo","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fe715c46.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Todo.css';\n\nclass Todo extends Component { \n  constructor(props) {\n    super(props);\n    this.state = {\n      isEditing: false, \n      task: this.props.task\n    }\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.toggleForm = this.toggleForm.bind(this);\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  handleUpdate(event) {\n    event.preventDefault();\n    this.props.updateTask(this.props.id, this.state.task);\n    this.setState({isEditing: false});\n  }\n\n  toggleForm() {\n    this.setState({ isEditing: !this.state.isEditing});\n  }\n\n  handleDelete() {\n    this.props.deleteTask(this.props.id);\n  }\n\n  handleToggle() {\n    this.props.toggleTask(this.props.id);\n  }\n\n  render() {\n    let result;\n    if(this.state.isEditing) {\n      result = (\n        <div>\n          <form onSubmit={this.handleUpdate}>\n            <input \n              type=\"text\"\n              value={this.state.task}\n              name=\"task\"\n              onChange={this.handleChange}\n            />\n            <button>Save</button>\n          </form>\n          \n        </div>\n      )\n    } else {\n      result = (\n        <div>\n        <button onClick={this.toggleForm}>Edit</button>\n        <button onClick={this.handleDelete}>X</button>\n        <li className={this.props.completed ? \"completed\" : \"\"} onClick={this.handleToggle} > \n          {this.props.task}\n        </li>\n      </div>\n      )\n    }\n    return result\n  }\n}\n\nexport default Todo; ","import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass NewTodoForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {task: \"\"};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event){\n    event.preventDefault();\n    let newTask = {...this.state, id: uuidv4(), completed: false}\n    this.props.createTask(newTask);\n    this.setState({task: \"\"});\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label htmlFor=\"task\"></label>\n        <input type=\"text\" placeholder=\"new task\"\n          id=\"task\"\n          name=\"task\"\n          value={this.state.task}\n          onChange={this.handleChange}\n        />\n        <button>Add Task</button>\n      </form>\n    )\n  }\n}\n\nexport default NewTodoForm;","import React, { Component } from 'react';\nimport Todo from './Todo';\nimport NewTodoForm from './NewTodoForm';\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {todos: [] }\n    this.create = this.create.bind(this);\n    this.delete = this.delete.bind(this);\n    this.update = this.update.bind(this);\n    this.toggleCompletion = this.toggleCompletion.bind(this);\n  }\n\n  create(newTask) {\n    this.setState({\n      todos: [...this.state.todos, newTask]\n    });\n  }\n\n  delete(id) {\n    this.setState({\n      todos: this.state.todos.filter(box => box.id !== id)\n    });\n  }\n\n  update(id, updatedTask) {\n    const updatedTodos = this.state.todos.map( todo => {\n      if(todo.id === id) {\n        return {...todo, task: updatedTask}\n      } \n      return todo;\n    })\n    this.setState({todos: updatedTodos});\n  }\n\n  toggleCompletion(id) {\n    const updatedTodos = this.state.todos.map( todo => {\n      if(todo.id === id) {\n        return {...todo, completed: !todo.completed}\n      } \n      return todo;\n    })\n    this.setState({todos: updatedTodos});\n  }\n\n  render() {\n    const todos = this.state.todos.map(todo => {\n      return <Todo \n      task={todo.task} \n      key={todo.id}\n      id={todo.id}\n      completed={todo.completed}\n      deleteTask={this.delete}\n      updateTask={this.update}\n      toggleTask={this.toggleCompletion}\n      />;\n    })\n    return(\n      <div>\n        <h1>Task Manager</h1>\n        <NewTodoForm createTask={this.create}/>\n        {todos}\n      </div>\n    )\n  }\n}\n\nexport default TodoList; ","import React from 'react';\nimport './App.css';\nimport TodoList from './TodoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}